//This is dateandtime.bgt exactly how it was copied. Only thing I did was put braces in spaces rather than have them on it's own line because it was bothering me.

string seconds;
string included;
string included2;
string time;
string date;
string ampm;
int hour2;
string get_date(bool include_weekday=false, bool numerical=true) {
date="";
if (numerical==true) {
if (include_weekday==true) {
date+=DATE_WEEKDAY_NAME+", "+DATE_MONTH+"-"+DATE_DAY+"-"+DATE_YEAR;
}
else {
date+=DATE_MONTH+"-"+DATE_DAY+"-"+DATE_YEAR;
}
}
else {
if (include_weekday==true) {
date=DATE_WEEKDAY_NAME+", "+DATE_MONTH_NAME+" "+DATE_DAY+", "+DATE_YEAR;
}
else {
date=DATE_MONTH_NAME+" "+DATE_DAY+", "+DATE_YEAR;
}
}
return date;
}
string get_time(bool twelvehour=true, bool include_seconds=true) {
time="";
if (TIME_SECOND<10) {
included2="0";
}
else {
included2="";
}
if (TIME_MINUTE<=9) {
included="0";
}
else {
included="";
}
if (TIME_HOUR<12) {
ampm="AM";
}
if (TIME_HOUR>=12) {
hour2=TIME_HOUR-12;
ampm="PM";
}
if (TIME_HOUR==0) {
hour2=12;
}
if (TIME_HOUR>0 and TIME_HOUR<=12) {
hour2=TIME_HOUR;
}
seconds=TIME_SECOND;
if (twelvehour==true) {
if (include_seconds==true) {
time=hour2+":"+included+TIME_MINUTE+":"+included2+seconds+" "+ampm;
}
else {
time=hour2+":"+included+TIME_MINUTE+" "+ampm;
}
}
else {
if (include_seconds==true) {
time=TIME_HOUR+":"+included+TIME_MINUTE+":"+included2+seconds;
}
else {
time=TIME_HOUR+":"+included+TIME_MINUTE;
}
}
return time;
}

//speech.bgt

uint8 active_sr() {
uint8 ret=0;
for(uint8 i=0; i<=4; i++) {
if(screen_reader_is_running(i)) {
ret=i;
break;
}
}
return ret;
}
bool speak(string text, bool interrupt=true) {
tts_voice tts_v;
uint8 mode=active_sr();
if(mode==0) {
if(interrupt)
return tts_v.speak_interrupt(text);
else
return tts_v.speak(text);
}
if(mode!=0) {
if(interrupt)
return screen_reader_speak_interrupt(mode,text);
else
return screen_reader_speak(mode,text);
}
return false;
}
//Me: Type stn(number) instead of string_to_number(number).

double stn(string n) {
return string_to_number(n);
}

//Todo: Function that checks and copies nvdaControllerClient32.dll to DIRECTORY_TEMP.

bool init_nvda() {
if(!screen_reader_set_library_path(NVDA,DIRECTORY_TEMP+"/NVDA.dll")) return false;
return true;
}
//Simply a function to toggle an int from 0 to 1 or from 1 to 0.
int toggleInt(int i) {
return(i==0?1:0);
}
